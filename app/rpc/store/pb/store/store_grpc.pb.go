// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: store.proto

package store

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StoreBecome_CreateStore_FullMethodName     = "/store.StoreBecome/CreateStore"
	StoreBecome_JoinStoreMember_FullMethodName = "/store.StoreBecome/JoinStoreMember"
	StoreBecome_SaveChatMessage_FullMethodName = "/store.StoreBecome/SaveChatMessage"
)

// StoreBecomeClient is the client API for StoreBecome service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StoreBecomeClient interface {
	CreateStore(ctx context.Context, in *CreateStoreReq, opts ...grpc.CallOption) (*CreateStoreRes, error)
	JoinStoreMember(ctx context.Context, in *JoinStoreMemberReq, opts ...grpc.CallOption) (*JoinStoreMemberRes, error)
	SaveChatMessage(ctx context.Context, in *SaveChatReq, opts ...grpc.CallOption) (*Response, error)
}

type storeBecomeClient struct {
	cc grpc.ClientConnInterface
}

func NewStoreBecomeClient(cc grpc.ClientConnInterface) StoreBecomeClient {
	return &storeBecomeClient{cc}
}

func (c *storeBecomeClient) CreateStore(ctx context.Context, in *CreateStoreReq, opts ...grpc.CallOption) (*CreateStoreRes, error) {
	out := new(CreateStoreRes)
	err := c.cc.Invoke(ctx, StoreBecome_CreateStore_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeBecomeClient) JoinStoreMember(ctx context.Context, in *JoinStoreMemberReq, opts ...grpc.CallOption) (*JoinStoreMemberRes, error) {
	out := new(JoinStoreMemberRes)
	err := c.cc.Invoke(ctx, StoreBecome_JoinStoreMember_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeBecomeClient) SaveChatMessage(ctx context.Context, in *SaveChatReq, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, StoreBecome_SaveChatMessage_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StoreBecomeServer is the server API for StoreBecome service.
// All implementations must embed UnimplementedStoreBecomeServer
// for forward compatibility
type StoreBecomeServer interface {
	CreateStore(context.Context, *CreateStoreReq) (*CreateStoreRes, error)
	JoinStoreMember(context.Context, *JoinStoreMemberReq) (*JoinStoreMemberRes, error)
	SaveChatMessage(context.Context, *SaveChatReq) (*Response, error)
	mustEmbedUnimplementedStoreBecomeServer()
}

// UnimplementedStoreBecomeServer must be embedded to have forward compatible implementations.
type UnimplementedStoreBecomeServer struct {
}

func (UnimplementedStoreBecomeServer) CreateStore(context.Context, *CreateStoreReq) (*CreateStoreRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStore not implemented")
}
func (UnimplementedStoreBecomeServer) JoinStoreMember(context.Context, *JoinStoreMemberReq) (*JoinStoreMemberRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JoinStoreMember not implemented")
}
func (UnimplementedStoreBecomeServer) SaveChatMessage(context.Context, *SaveChatReq) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveChatMessage not implemented")
}
func (UnimplementedStoreBecomeServer) mustEmbedUnimplementedStoreBecomeServer() {}

// UnsafeStoreBecomeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StoreBecomeServer will
// result in compilation errors.
type UnsafeStoreBecomeServer interface {
	mustEmbedUnimplementedStoreBecomeServer()
}

func RegisterStoreBecomeServer(s grpc.ServiceRegistrar, srv StoreBecomeServer) {
	s.RegisterService(&StoreBecome_ServiceDesc, srv)
}

func _StoreBecome_CreateStore_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStoreReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreBecomeServer).CreateStore(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreBecome_CreateStore_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreBecomeServer).CreateStore(ctx, req.(*CreateStoreReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreBecome_JoinStoreMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JoinStoreMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreBecomeServer).JoinStoreMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreBecome_JoinStoreMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreBecomeServer).JoinStoreMember(ctx, req.(*JoinStoreMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _StoreBecome_SaveChatMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveChatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreBecomeServer).SaveChatMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StoreBecome_SaveChatMessage_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreBecomeServer).SaveChatMessage(ctx, req.(*SaveChatReq))
	}
	return interceptor(ctx, in, info, handler)
}

// StoreBecome_ServiceDesc is the grpc.ServiceDesc for StoreBecome service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StoreBecome_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "store.StoreBecome",
	HandlerType: (*StoreBecomeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateStore",
			Handler:    _StoreBecome_CreateStore_Handler,
		},
		{
			MethodName: "JoinStoreMember",
			Handler:    _StoreBecome_JoinStoreMember_Handler,
		},
		{
			MethodName: "SaveChatMessage",
			Handler:    _StoreBecome_SaveChatMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "store.proto",
}
