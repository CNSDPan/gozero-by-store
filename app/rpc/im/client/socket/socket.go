// Code generated by goctl. DO NOT EDIT.
// goctl 1.7.6
// Source: im.proto

package socket

import (
	"context"

	"store/app/rpc/im/pb/im"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	BroadcastReq = im.BroadcastReq
	Response     = im.Response

	Socket interface {
		BroadcastMsg(ctx context.Context, in *BroadcastReq, opts ...grpc.CallOption) (*Response, error)
		BroadcastBecomeMsg(ctx context.Context, in *BroadcastReq, opts ...grpc.CallOption) (*Response, error)
	}

	defaultSocket struct {
		cli zrpc.Client
	}
)

func NewSocket(cli zrpc.Client) Socket {
	return &defaultSocket{
		cli: cli,
	}
}

func (m *defaultSocket) BroadcastMsg(ctx context.Context, in *BroadcastReq, opts ...grpc.CallOption) (*Response, error) {
	client := im.NewSocketClient(m.cli.Conn())
	return client.BroadcastMsg(ctx, in, opts...)
}

func (m *defaultSocket) BroadcastBecomeMsg(ctx context.Context, in *BroadcastReq, opts ...grpc.CallOption) (*Response, error) {
	client := im.NewSocketClient(m.cli.Conn())
	return client.BroadcastBecomeMsg(ctx, in, opts...)
}
