// Code generated by goctl. DO NOT EDIT.
// Source: api.proto

package userservice

import (
	"context"

	"store/app/api/rpc/pb/api"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Response      = api.Response
	StoreInfoReq  = api.StoreInfoReq
	StoreInfoRes  = api.StoreInfoRes
	StoreItem     = api.StoreItem
	StoreListReq  = api.StoreListReq
	StoreListRes  = api.StoreListRes
	StoreUsersReq = api.StoreUsersReq
	StoreUsersRes = api.StoreUsersRes
	StoresMap     = api.StoresMap
	UserInfoReq   = api.UserInfoReq
	UserInfoRes   = api.UserInfoRes
	UserItem      = api.UserItem
	UserLoginReq  = api.UserLoginReq
	UserLoginRes  = api.UserLoginRes
	UsersMap      = api.UsersMap

	UserService interface {
		Login(ctx context.Context, in *UserLoginReq, opts ...grpc.CallOption) (*UserLoginRes, error)
		Info(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserLoginRes, error)
	}

	defaultUserService struct {
		cli zrpc.Client
	}
)

func NewUserService(cli zrpc.Client) UserService {
	return &defaultUserService{
		cli: cli,
	}
}

func (m *defaultUserService) Login(ctx context.Context, in *UserLoginReq, opts ...grpc.CallOption) (*UserLoginRes, error) {
	client := api.NewUserServiceClient(m.cli.Conn())
	return client.Login(ctx, in, opts...)
}

func (m *defaultUserService) Info(ctx context.Context, in *UserInfoReq, opts ...grpc.CallOption) (*UserLoginRes, error) {
	client := api.NewUserServiceClient(m.cli.Conn())
	return client.Info(ctx, in, opts...)
}
