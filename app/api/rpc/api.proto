syntax = "proto3";

package api;
option go_package="./api";

message Response{
  string errMsg = 1;
  string code = 2;
  string message = 3;
}

/*
  * 用户业务
 */
message UserLoginReq{
  int64 Mobile = 1;
  string Password = 2;
  string jwtSecret = 3;
  int64 seconds = 4;
}
message UserLoginRes{
  Response result = 1;
  int64 userId = 2;
  string token = 3;
}
message UserInfoReq{
  int64 userId = 1;
  string token = 2;
}
message UserInfoRes{
  Response result = 1;
  int64 userId = 2;
  int64 mobile = 3;
  string name = 4;
  string avatar = 5;
}
message UserItem{
  int64 userId = 1;
  string name = 2;
  string avatar = 3;
  int64 mobile = 4;
}
message UsersMap {
  int64 total = 1;
  int64 page = 2;
  int64 limit = 3;
  int64 offset = 4;
  int64 current = 5;
  repeated UserItem rows = 7;
}

service ApiUser{
  rpc Login(UserLoginReq) returns (UserLoginRes);
  rpc Info(UserInfoReq) returns (UserInfoRes);
}

/*
  * 店铺业务
 */
message StoreItem{
  int64 storeId = 1;
  string name = 2;
  string avatar = 3;
  string desc = 4;
  optional int64 contacts = 5;
}
message StoresMap{
  int64 total = 2;
  int64 page = 3;
  int64 limit = 4;
  int64 offset = 5;
  int64 current = 6;
  repeated StoreItem rows = 7;
}
message StoreListReq{
  int64 userId = 1;
}
message StoreListRes{
  Response result = 1;
  StoresMap data = 2;
}
message StoreInfoReq{
  int64 storeId = 1;
  int64 userId = 2;
}
message StoreInfoRes {
  Response result = 1;
  int64 storeId = 2;
  string name = 3;
  string avatar = 4;
  string desc = 5;
  optional int64 contacts = 6;
  int64 storeUserId = 7;
  int64 userId = 8;
}
message MemberUsersItemReq {
  int64 storeId = 1;
  int32 limit = 2;
  int32 offset = 3;
}
message MemberUsersItemRes {
  Response result = 1;
  UsersMap data = 2;
}

service ApiStore{
  rpc List(StoreListReq) returns (StoreListRes);
  rpc Info(StoreInfoReq) returns (StoreInfoRes);
  rpc MemberUserList(MemberUsersItemReq) returns (MemberUsersItemRes);
}

message AuthReq {
  string token = 1;
}
message AuthRes {
  Response result = 1;
}
service ApiToken {
  rpc CheckAuth(AuthReq) returns (AuthRes);
}